// <auto-generated />
using System;
using FilmsAPI_V2.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FilmsAPI_V2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231021174802_InitialSeedData")]
    partial class InitialSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("actor_name");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("birthdate");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("DECIMAL")
                        .HasColumnName("salary");

                    b.HasKey("ActorId");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("actor_id_idx");

                    b.ToTable("actors", (string)null);

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            ActorName = "Heather Langenkamp",
                            BirthDate = new DateTime(1964, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 1700m
                        },
                        new
                        {
                            ActorId = 2,
                            ActorName = "Harrison Ford",
                            BirthDate = new DateTime(1942, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 18000m
                        },
                        new
                        {
                            ActorId = 3,
                            ActorName = "Mark Hamill",
                            BirthDate = new DateTime(1951, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 19000m
                        },
                        new
                        {
                            ActorId = 4,
                            ActorName = "Louis Gossett Jr",
                            BirthDate = new DateTime(1936, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 20000m
                        });
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Commentary", b =>
                {
                    b.Property<int>("CommentaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commentary_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentaryId"));

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("content");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<bool>("Recommend")
                        .HasColumnType("BOOLEAN")
                        .HasColumnName("recommend");

                    b.HasKey("CommentaryId");

                    b.HasIndex("CommentaryId")
                        .HasDatabaseName("commentary_id_idx");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("commentaries_movie_id_idx");

                    b.ToTable("commentaries", (string)null);

                    b.HasData(
                        new
                        {
                            CommentaryId = 1,
                            Content = "Superb!",
                            MovieId = 1,
                            Recommend = true
                        },
                        new
                        {
                            CommentaryId = 2,
                            Content = "Wes Craven rocks!",
                            MovieId = 2,
                            Recommend = true
                        },
                        new
                        {
                            CommentaryId = 3,
                            Content = "A heave decline on Jaws saga",
                            MovieId = 4,
                            Recommend = false
                        },
                        new
                        {
                            CommentaryId = 4,
                            Content = "Light Sabers are the future!",
                            MovieId = 3,
                            Recommend = true
                        });
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("genre_name");

                    b.HasKey("GenreId");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("genre_id_idx");

                    b.ToTable("genres", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Horror"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Sci Fi"
                        });
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<bool>("IsInCinema")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BOOLEAN")
                        .HasDefaultValue(false)
                        .HasColumnName("is_in_cinema");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("DATE")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("title");

                    b.HasKey("MovieId");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("movie_id_idx");

                    b.ToTable("movies", (string)null);

                    b.HasData(
                        new
                        {
                            MovieId = 2,
                            IsInCinema = false,
                            ReleaseDate = new DateTime(1981, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Nightmare on Elm Street"
                        },
                        new
                        {
                            MovieId = 1,
                            IsInCinema = false,
                            ReleaseDate = new DateTime(1981, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Indiana Jones"
                        },
                        new
                        {
                            MovieId = 3,
                            IsInCinema = false,
                            ReleaseDate = new DateTime(1977, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Star Wars"
                        },
                        new
                        {
                            MovieId = 4,
                            IsInCinema = false,
                            ReleaseDate = new DateTime(1981, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Jaws 3D"
                        });
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.MovieActor", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("integer")
                        .HasColumnName("actor_id");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer")
                        .HasColumnName("movie_id");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("character_name");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER")
                        .HasColumnName("order");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("ActorId")
                        .HasDatabaseName("movies_actors_actor_id_idx");

                    b.HasIndex("MovieId")
                        .HasDatabaseName("movies_actors_movie_id_idx");

                    b.ToTable("movies_actors", (string)null);

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 2,
                            Character = "Nancy Thompson",
                            Order = 1
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1,
                            Character = "Indiana Jones",
                            Order = 2
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 3,
                            Character = "Luke SkyWalker",
                            Order = 3
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 4,
                            Character = "Calvin Bouchard",
                            Order = 4
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("integer");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("GenreMovie");

                    b.HasData(
                        new
                        {
                            GenresGenreId = 1,
                            MoviesMovieId = 1
                        },
                        new
                        {
                            GenresGenreId = 2,
                            MoviesMovieId = 2
                        },
                        new
                        {
                            GenresGenreId = 2,
                            MoviesMovieId = 4
                        },
                        new
                        {
                            GenresGenreId = 3,
                            MoviesMovieId = 3
                        });
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Commentary", b =>
                {
                    b.HasOne("FilmsAPI_V2.Domain.Entities.Movie", "Movie")
                        .WithMany("Commentaries")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("movie_id");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.MovieActor", b =>
                {
                    b.HasOne("FilmsAPI_V2.Domain.Entities.Actor", "Actor")
                        .WithMany("MoviesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmsAPI_V2.Domain.Entities.Movie", "Movie")
                        .WithMany("MoviesActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("FilmsAPI_V2.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmsAPI_V2.Domain.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Actor", b =>
                {
                    b.Navigation("MoviesActors");
                });

            modelBuilder.Entity("FilmsAPI_V2.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("MoviesActors");
                });
#pragma warning restore 612, 618
        }
    }
}
